name: Rust CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}.${{ github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  detect-ci-trigger:
    name: detect ci trigger
    runs-on: ubuntu-latest
    if: |
      github.repository_owner == 'keewis'
      && (github.event_name == 'push' || github.event_name == 'pull_request')
    outputs:
      triggered: ${{ steps.detect-trigger.outputs.trigger-found }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 2
          persist-credentials: false

      - uses: xarray-contrib/ci-trigger@10cd2bfec3484946a4058a421ddf9cfad101e715 # v1.2.1
        id: detect-trigger
        with:
          keyword: "[skip-ci]"

  test:
    name: ${{ matrix.os }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}

    needs: detect-ci-trigger
    if: |
      needs.detect-ci-trigger.outputs.triggered == 'false'
      && !contains(github.event.pull_request.labels.*.name, 'skip-ci')

    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-latest"
          # building proj-sys on windows appears to not really be possible
          - "windows-latest"
          - "macos-latest"
        python-version: ["3.10", "3.12", "3.13"]

    env:
      FORCE_COLOR: 3

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Install Rust
        uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # 1.0
        with:
          toolchain: stable

      - name: Setup micromamba
        uses: mamba-org/setup-micromamba@7f29b8b80078b1b601dfa018b0f7425c587c63bb # 2.0.6
        with:
          environment-name: rust-tests
          environment-file: ci/requirements/environment-rust.yaml
          cache-environment: true
          cache-environment-key: "${{runner.os}}-${{runner.arch}}-rust-py${{ matrix.python-version }}-${{env.TODAY}}-${{hashFiles(env.CONDA_ENV_FILE)}}"
          create-args: >-
            python=${{ matrix.python-version }}

      - name: Create rust cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # 2.8.0
        with:
          prefix-key: "py${{ matrix.python-version }}"

      - name: Help finding installed libraries
        run: |
          pushd $CONDA_PREFIX
          if [[ ${{ runner.os }} == "Windows" ]]; then
            export PKG_CONFIG_PATH="$(readlink -f Library/lib/pkgconfig)"
            export LD_LIBRARY_PATH="$(readlink -f Library/lib)"
            export PYO3_PYTHON="$(readlink -f python.exe)"
          else
            export PKG_CONFIG_PATH="$(readlink -f lib/pkgconfig)"
            export LD_LIBRARY_PATH="$(readlink -f lib)"
            export PYO3_PYTHON="$(readlink -f bin/python)"
          fi
          popd

          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PYO3_PYTHON=$PYO3_PYTHON" >> $GITHUB_ENV

      - name: Help the linker on macos
        if: runner.os == 'MacOS'
        shell: bash {0}
        run: |
          mkdir -p target/debug/deps
          ln -s $CONDA_PREFIX/lib/*.dylib target/debug/deps/

          pkg-config --libs --cflags proj 'proj >= 9.4.0'
          pkgconf --libs --cflags proj 'proj >= 9.4.0'

      - name: Clean up pkg-config on windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          # remove dependency paths
          sed -i '/Requires.private:/d' $(find $PKG_CONFIG_PATH -name "*.pc" - type f)

          # check that this actually works
          #pkg-config --libs --cflags proj 'proj >= 9.4.0'

      - name: Run tests
        run: |
          cargo build --tests --keep-going
          cargo test --no-fail-fast

  lint:
    name: Lint
    runs-on: ubuntu-latest

    env:
      FORCE_COLOR: 3

    strategy:
      matrix:
        python-version: ["3.12"]

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Install Rust
        uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # 1.0
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Setup micromamba
        uses: mamba-org/setup-micromamba@7f29b8b80078b1b601dfa018b0f7425c587c63bb # 2.0.6
        with:
          environment-name: rust-tests
          environment-file: ci/requirements/environment-rust.yaml
          cache-environment: true
          cache-environment-key: "${{runner.os}}-${{runner.arch}}-rust-${{env.TODAY}}-${{hashFiles(env.CONDA_ENV_FILE)}}"
          create-args: >-
            python=${{ matrix.python-version }}

      - name: Create rust cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # 2.8.0

      - name: Cargo clippy
        run: |
          cargo clippy --tests -- -D warnings
